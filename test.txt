Private Type tagINITCOMMONCONTROLSEX
    dwSize          As Long
    dwICC           As Long
End Type

Private Type SYSTEMTIME
    Year            As Integer
    Month           As Integer
    DayOfWeek       As Integer
    Day             As Integer
    Hour            As Integer
    Minute          As Integer
    Second          As Integer
    Milliseconds    As Integer
End Type

Private Type SYSTEMTIMERANGE
    MinYear         As Integer
    MinMonth        As Integer
    MinDayOfWeek    As Integer
    MinDay          As Integer
    MinHour         As Integer
    MinMinute       As Integer
    MinSecond       As Integer
    MinMilliseconds As Integer
    MaxYear         As Integer
    MaxMonth        As Integer
    MaxDayOfWeek    As Integer
    MaxDay          As Integer
    MaxHour         As Integer
    MaxMinute       As Integer
    MaxSecond       As Integer
    MaxMilliseconds As Integer
End Type

Private Const DATETIMEPICK_CLASS = "SysDateTimePick32"
Private Const ICC_DATE_CLASSES = &H100
Private Const DTS_SHORTDATEFORMAT = &H0
Private Const DTS_LONGDATEFORMAT = &H4

Private Const GDT_VALID = 0
Private Const GDTR_MIN = &H1
Private Const GDTR_MAX = &H2

Private Const WM_SETFONT = &H30
Private Const WM_GETFONT = &H31
Private Const DTM_FIRST = &H1000
Private Const DTM_GETSYSTEMTIME = (DTM_FIRST + 1)
Private Const DTM_SETSYSTEMTIME = (DTM_FIRST + 2)
Private Const DTM_GETRANGE = (DTM_FIRST + 3)
Private Const DTM_SETRANGE = (DTM_FIRST + 4)
Private Const DTM_SETFORMAT = (DTM_FIRST + 5)
Private Const DTM_SETMCCOLOR = (DTM_FIRST + 6)
Private Const DTM_GETMCCOLOR = (DTM_FIRST + 7)
Private Const DTM_GETMONTHCAL = (DTM_FIRST + 8)
Private Const DTM_SETMCFONT = (DTM_FIRST + 9)
Private Const DTM_GETMCFONT = (DTM_FIRST + 10)

Private Const MCSC_BACKGROUND = 0
Private Const MCSC_TEXT = 1
Private Const MCSC_TITLEBK = 2
Private Const MCSC_TITLETEXT = 3
Private Const MCSC_MONTHBK = 4
Private Const MCSC_TRAILINGTEXT = 5

Private Const POINT_PER_INCH = 72
Private Const LOGPIXELSX = 88
Private Const LOGPIXELSY = 90
Private Const GWL_HINSTANCE As Long = (-6)
Private Const WS_CHILD = &H40000000
Private Const WS_VISIBLE = &H10000000

Private Const FW_DONTCARE = 0
Private Const FW_BOLD = 700
Private Const ANSI_CHARSET = 0
Private Const DEFAULT_CHARSET = 1
Private Const SHIFTJIS_CHARSET = 128
Private Const OUT_DEFAULT_PRECIS = 0
Private Const CLIP_DEFAULT_PRECIS = 0
Private Const DEFAULT_QUALITY = 0
Private Const DEFAULT_PITCH = 0
Private Const FF_DONTCARE = 0

'GetStockObject
Private Const DEFAULT_GUI_FONT = 17

Private Declare PtrSafe Function InitCommonControlsEx Lib "ComCtl32" _
        (LPINITCOMMONCONTROLSEX As Any) As Long

Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" _
        (ByVal lpClassName As String, _
         ByVal lpWindowName As String) As LongPtr

Private Declare PtrSafe Function FindWindowEx Lib "user32" Alias "FindWindowExA" _
        (ByVal hwndParent As LongPtr, _
         ByVal hwndChildAfter As LongPtr, _
         ByVal lpszClass As String, _
         ByVal lpszWindow As String) As LongPtr

Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" _
        (ByVal hdc As LongPtr, ByVal nIndex As Long) As Long

Private Declare PtrSafe Function GetWindowLongPtr Lib "user32" Alias "GetWindowLongPtrA" _
        (ByVal hwnd As LongPtr, _
         ByVal nIndex As Long) As LongPtr

Private Declare PtrSafe Function GetDesktopWindow Lib "user32" () As LongPtr

Private Declare PtrSafe Function GetDC Lib "user32" _
        (ByVal hwnd As LongPtr) As LongPtr

Private Declare PtrSafe Function ReleaseDC Lib "user32" _
        (ByVal hwnd As LongPtr, ByVal hdc As LongPtr) As Long

Private Declare PtrSafe Function CreateWindowEx Lib "user32" Alias "CreateWindowExA" _
        (ByVal dwExStyle As Long, _
         ByVal lpClassName As String, _
         ByVal lpWindowName As String, _
         ByVal dwStyle As Long, _
         ByVal X As Long, _
         ByVal Y As Long, _
         ByVal nWidth As Long, _
         ByVal nHeight As Long, _
         ByVal hwndParent As LongPtr, _
         ByVal hMenu As LongPtr, _
         ByVal hInstance As LongPtr, _
         lpParam As Any) As LongPtr

Private Declare PtrSafe Function SendMessage Lib "user32" Alias "SendMessageA" _
        (ByVal hwnd As LongPtr, _
         ByVal wMsg As Long, _
         ByVal wParam As LongPtr, _
         lParam As Any) As LongPtr

Private Declare PtrSafe Function MoveWindow Lib "user32" _
        (ByVal hwnd As LongPtr, _
         ByVal X As Long, _
         ByVal Y As Long, _
         ByVal nWidth As Long, _
         ByVal nHeight As Long, _
         ByVal bRepaint As Long) As Long

Private Declare PtrSafe Function DestroyWindow Lib "user32" _
        (ByVal hwnd As LongPtr) As Long

Private Declare PtrSafe Function IsWindow Lib "user32" _
        (ByVal hwnd As LongPtr) As Long

Private Declare PtrSafe Function SetFocus Lib "user32" _
        (ByVal hwnd As LongPtr) As LongPtr

Private Declare PtrSafe Function EnableWindow Lib "user32" _
        (ByVal hwnd As LongPtr, ByVal fEnable As Long) As Long

Private Declare PtrSafe Function IsWindowEnabled Lib "user32" _
        (ByVal hwnd As LongPtr) As Long

Private Declare PtrSafe Function GetSysColor Lib "user32" _
        (ByVal nIndex As Long) As Long

Private Declare PtrSafe Function CreateFont Lib "gdi32" Alias "CreateFontA" _
        (ByVal nHeight As Long, _
         ByVal nWidth As Long, _
         ByVal nEscapement As Long, _
         ByVal nOrientation As Long, _
         ByVal nWeight As Long, _
         ByVal fdwItalic As Long, _
         ByVal fdwUnderline As Long, _
         ByVal fdwStrikeOut As Long, _
         ByVal fdwCharSet As Long, _
         ByVal fdwOutPrecision As Long, _
         ByVal fdwClipPrecision As Long, _
         ByVal fdwQuality As Long, _
         ByVal fdwPitchAndFamily As Long, _
         ByVal pszFaceName As String) As LongPtr

Private Declare PtrSafe Function DeleteObject Lib "gdi32" _
        (ByVal hObject As LongPtr) As Long

Private Declare PtrSafe Function GetStockObject Lib "gdi32" _
        (ByVal nIndex As Long) As LongPtr

Private lngPixelsX As Long
Private lngPixelsY As Long

Private strThunder As String
Private blnCreate As Boolean
Private MyForm As MSForms.UserForm
Private colBaseCtrl As Collection)

    Private lnghWnd_Excel As LongPtr
    Private lnghInstance As LongPtr
    Private lnghWnd_Form As LongPtr
    Private lnghWnd_Sub As LongPtr
    Private lnghwndDTP() As LongPtr
    Private lnghwndFONT() As LongPtr
    Private lnghwndDefaultFONT As LongPtr

Private Const cstMask As Long = &H7FFFFFFF


'*******************************************************************************
'*******************************************************************************
Private Sub Class_Initialize()
    blnCreate = False
    Set colBaseCtrl = New Collection

    Call GetLogPixelsXY
    
    If (Val(Application.Version) <= 8) Then
        strThunder = "ThunderXFrame"        ' Excel97
    Else
        strThunder = "ThunderDFrame"        ' Excel2000～
    End If

    lnghwndDefaultFONT = GetStockObject(DEFAULT_GUI_FONT)
End Sub

Private Sub Class_Terminate()
    Me.Destroy
End Sub

'*******************************************************************************
'*******************************************************************************
Public Sub Add(NewCtrl As MSForms.ComboBox)
    If (blnCreate = False) Then
        colBaseCtrl.Add NewCtrl
    Else
        'Create済
    End If
End Sub

Public Sub Create(ByVal NewForm As MSForms.UserForm, _
                  Optional ByVal NewFormat As String = "", _
                  Optional ByVal NewMinDate As Date = #1/1/1601#, _
                  Optional ByVal NewMaxDate As Date = #12/31/9999#, _
                  Optional ByVal ForeColor As Long = -1, _
                  Optional ByVal BackColor As Long = -1, _
                  Optional ByVal TitleFore As Long = -1, _
                  Optional ByVal TitleBack As Long = -1, _
                  Optional ByVal Trailing As Long = -1, _
                  Optional ByVal DefaultFONT As Variant = True)
Dim i As Integer
Dim intFONT As Integer
    If (VarType(DefaultFONT) = vbBoolean) Then
        If (DefaultFONT = True) Then
            intFONT = 1
        Else
            intFONT = 0
        End If
    Else
        Select Case DefaultFONT
          Case 0 To 3
            intFONT = DefaultFONT
          Case Else
            intFONT = 1
        End Select
    End If

    If (blnCreate = True) Then

    ElseIf (colBaseCtrl.Count < 1) Or (NewForm Is Nothing) Then
        blnCreate = False
    Else
        Set MyForm = NewForm

        lnghWnd_Form = FindWindow(strThunder, MyForm.Caption)
        If (lnghWnd_Form = 0) Then
            blnCreate = False
            Exit Sub
        End If
    
        lnghWnd_Excel = FindWindow("XLMAIN", Application.Caption)
        
        lnghInstance = GetWindowLongPtr(lnghWnd_Excel, GWL_HINSTANCE)
        
        lnghWnd_Sub = FindWindowEx(lnghWnd_Form, GDT_VALID, vbNullString, vbNullString)
        
        ReDim lnghwndDTP(1 To colBaseCtrl.Count)
        ReDim lnghwndFONT(1 To colBaseCtrl.Count)
        For i = 1 To colBaseCtrl.Count
            Call Create_Sub(i, NewFormat, NewMinDate, NewMaxDate, intFONT)
        Next i
        blnCreate = True
        
        If (NewFormat <> "") Then
            Me.DateFormat(0) = NewFormat
        End If
    
        If (NewMinDate <= NewMaxDate) Then
            Me.MinDate(0) = NewMinDate
            Me.MaxDate(0) = NewMaxDate
        Else
            Me.MinDate(0) = #1/1/1601#
            Me.MaxDate(0) = #12/31/9999#
        End If

        Me.CalendarForeColor(0) = ForeColor
        Me.CalendarBackColor(0) = BackColor
        Me.CalendarTitleForeColor(0) = TitleFore
        Me.CalendarTitleBackColor(0) = TitleBack
        Me.CalendarTrailingForeColor(0) = Trailing
    End If
End Sub

Public Sub Destroy()
Dim i As Integer
    If (blnCreate = False) Then

    Else
      If (colBaseCtrl.Count > 0) Then
        For i = 1 To colBaseCtrl.Count
            If (IsWindow(lnghwndDTP(i)) <> 0) Then
                Call DestroyWindow(lnghwndDTP(i))
            End If
            If (lnghwndFONT(i) <> 0) Then
                Call DeleteObject(lnghwndFONT(i))
            End If
        Next i
      End If
    End If

    Set MyForm = Nothing
    Set colBaseCtrl = Nothing
    Erase lnghwndDTP
    Erase lnghwndFONT
    blnCreate = False
End Sub

Private Sub Create_Sub(ByVal Index As Integer, _
                       ByVal NewFormat As String, _
                       ByVal NewMinDate As Date, _
                       ByVal NewMaxDate As Date, _
                       ByVal NewFONT As Integer)
Dim icce As tagINITCOMMONCONTROLSEX
Dim dblTop As Double
Dim dblLeft As Double
Dim dblHeight As Double
Dim dblWidth As Double
Dim dblFontHeight As Double
Dim lngWeight As Long
Dim lngResult As Long

Dim lngSMResult As LongPtr

    dblLeft = colBaseCtrl(Index).Left * lngPixelsX / POINT_PER_INCH
    dblTop = colBaseCtrl(Index).Top * lngPixelsY / POINT_PER_INCH
    dblWidth = colBaseCtrl(Index).Width * lngPixelsX / POINT_PER_INCH
    dblHeight = colBaseCtrl(Index).Height * lngPixelsY / POINT_PER_INCH

    dblFontHeight = colBaseCtrl(Index).Font.Size * lngPixelsY / POINT_PER_INCH
    
    colBaseCtrl(Index).Enabled = False

    If (IsWindow(lnghwndDTP(Index)) <> 0) Then
        Call DestroyWindow(lnghwndDTP(Index))
    End If
    
    With icce
        .dwICC = ICC_DATE_CLASSES
        .dwSize = Len(icce)
    End With
    
    lngResult = InitCommonControlsEx(icce)

    lnghwndDTP(Index) = CreateWindowEx _
                            (GDT_VALID, DATETIMEPICK_CLASS, vbNullString, _
                             WS_CHILD Or WS_VISIBLE Or DTS_SHORTDATEFORMAT, _
                             dblLeft, dblTop, dblWidth, dblHeight, _
                             lnghWnd_Sub, GDT_VALID, lnghInstance, vbNullString)

    If (NewFONT = 1) Then

    Else
        If (colBaseCtrl(Index).Font.Bold = True) Then
            lngWeight = FW_BOLD
        Else
            lngWeight = FW_DONTCARE
        End If
        lnghwndFONT(Index) = _
            CreateFont(CLng(dblFontHeight * (-1)), _
                       GDT_VALID, GDT_VALID, GDT_VALID, _
                       lngWeight, _
                       GDT_VALID, GDT_VALID, GDT_VALID, _
                       SHIFTJIS_CHARSET, _
                       OUT_DEFAULT_PRECIS, _
                       CLIP_DEFAULT_PRECIS, _
                       DEFAULT_QUALITY, _
                       (DEFAULT_PITCH + FF_DONTCARE), _
                       colBaseCtrl(Index).Font.Name)
        Select Case NewFONT
          Case 0
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      WM_SETFONT, lnghwndFONT(Index), ByVal GDT_VALID)
          Case 2
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      WM_SETFONT, lnghwndFONT(Index), ByVal GDT_VALID)
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      DTM_SETMCFONT, lnghwndDefaultFONT, ByVal GDT_VALID)
          Case 3
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      DTM_SETMCFONT, lnghwndFONT(Index), ByVal GDT_VALID)
        End Select
    End If
End Sub

Private Sub GetLogPixelsXY()
    Dim lnghwnd As LongPtr
    Dim lngDC As LongPtr

    lnghwnd = GetDesktopWindow()
    lngDC = GetDC(lnghwnd)
    lngPixelsX = GetDeviceCaps(lngDC, LOGPIXELSX)
    lngPixelsY = GetDeviceCaps(lngDC, LOGPIXELSY)
    ReleaseDC lnghwnd, lngDC
End Sub

'*******************************************************************************
Public Property Get Count() As Integer
    Count = colBaseCtrl.Count
End Property

'--------------------------------------------------------------
Public Property Let DateFormat(Optional ByVal Index As Integer = 0, _
                               ByVal NewFormat As String)
Dim i As Integer
Dim lngSMResult As LongPtr

    If (blnCreate = True) And (NewFormat <> "") Then
        Select Case Index
          Case 0
            For i = 1 To colBaseCtrl.Count
                lngSMResult = SendMessage(lnghwndDTP(i), _
                                          DTM_SETFORMAT, GDT_VALID, ByVal NewFormat)
            Next i
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      DTM_SETFORMAT, GDT_VALID, ByVal NewFormat)
          Case Else
        End Select
    Else
    End If
End Property

'--------------------------------------------------------------
Public Property Get Value(Optional ByVal Index As Integer = 0) As Date
Dim st As SYSTEMTIME
Dim lngSMResult As LongPtr

    If (blnCreate = True) Then
        Select Case Index
          Case 0
            lngSMResult = SendMessage(lnghwndDTP(1), _
                                      DTM_GETSYSTEMTIME, GDT_VALID, st)
            Value = DateSerial(st.Year, st.Month, st.Day)
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      DTM_GETSYSTEMTIME, GDT_VALID, st)
            Value = DateSerial(st.Year, st.Month, st.Day)
          Case Else
            Value = CDate(0)
        End Select
    Else
        Value = CDate(0)
    End If
End Property

Public Property Let Value(Optional ByVal Index As Integer = 0, _
                          ByVal NewValue As Date)
Dim st As SYSTEMTIME
Dim i As Integer
Dim lngSMResult As LongPtr

    If (blnCreate = True) Then
        With st
            .Year = Year(NewValue)
            .Month = Month(NewValue)
            .Day = Day(NewValue)
            .DayOfWeek = Weekday(NewValue) - 1
            .Hour = 0
            .Minute = 0
            .Second = 0
        End With

        Select Case Index
          Case 0
            For i = 1 To colBaseCtrl.Count
              lngSMResult = SendMessage(lnghwndDTP(i), _
                                        DTM_SETSYSTEMTIME, GDT_VALID, st)
            Next i
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      DTM_SETSYSTEMTIME, GDT_VALID, st)
          Case Else
        End Select
    Else
    End If
End Property

'-------------------------------------------------------------------------------
Public Property Get Enabled(Optional ByVal Index As Integer = 0) As Boolean
    If (blnCreate = True) Then
        Select Case Index
          Case 0
            Enabled = CBool(IsWindowEnabled(lnghwndDTP(1)))
          Case 1 To colBaseCtrl.Count
            Enabled = CBool(IsWindowEnabled(lnghwndDTP(Index)))
          Case Else
            Enabled = False
        End Select
    Else
        Enabled = False
    End If
End Property

Public Property Let Enabled(Optional ByVal Index As Integer = 0, _
                            ByVal blnNewEnabled As Boolean)
Dim lngResult As Long
Dim i As Integer

    If (blnCreate = True) Then
        Select Case Index
          Case 0
            For i = 1 To colBaseCtrl.Count
                lngResult = EnableWindow(lnghwndDTP(i), blnNewEnabled)
            Next i
          Case 1 To colBaseCtrl.Count
            lngResult = EnableWindow(lnghwndDTP(Index), blnNewEnabled)
          Case Else
        End Select
    Else
    End If
End Property

'-------------------------------------------------------------------------------
Public Property Get MinDate(Optional ByVal Index As Integer = 0) As Date
Dim st As SYSTEMTIMERANGE
Dim lngSMResult As LongPtr
    
    If (blnCreate = True) Then
        Select Case Index
          Case 0
            lngSMResult = SendMessage(lnghwndDTP(1), _
                                      DTM_GETRANGE, GDT_VALID, st)
            MinDate = DateSerial(st.MinYear, st.MinMonth, st.MinDay)
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      DTM_GETRANGE, GDT_VALID, st)
            MinDate = DateSerial(st.MinYear, st.MinMonth, st.MinDay)
          Case Else
            MinDate = CDate(0)
        End Select
    Else
      MinDate = CDate(0)
    End If
End Property

Public Property Let MinDate(Optional ByVal Index As Integer = 0, _
                            ByVal dtmNewValue As Date)
Dim i As Integer
    
    If (blnCreate = True) Then
        Select Case Index
          Case 0
            For i = 1 To colBaseCtrl.Count
                Call MinDate_Sub(i, dtmNewValue)
            Next i
          Case 1 To colBaseCtrl.Count
            Call MinDate_Sub(Index, dtmNewValue)
          Case Else
        End Select
    Else
    End If
End Property

Private Sub MinDate_Sub(ByVal Index As Integer, _
                        ByVal dtmNewValue As Date)
Dim dtmMax As Date
Dim st As SYSTEMTIMERANGE
Dim lngSMResult As LongPtr

    lngSMResult = SendMessage(lnghwndDTP(Index), _
                              DTM_GETRANGE, GDT_VALID, st)
    
    With st
        .MinYear = Year(dtmNewValue)
        .MinMonth = Month(dtmNewValue)
        .MinDay = Day(dtmNewValue)
        .MinDayOfWeek = Weekday(dtmNewValue) - 1     ' APIでは日曜日が0
        .MinHour = 0
        .MinMinute = 0
        .MinSecond = 0
    End With
    
    If (st.MaxYear = 0) Then
        lngSMResult = SendMessage(lnghwndDTP(Index), _
                                  DTM_SETRANGE, GDTR_MIN, st)
    Else
        dtmMax = DateSerial(st.MaxYear, st.MaxMonth, st.MaxDay)
        If (dtmMax < dtmNewValue) Then
            With st
                .MaxYear = .MinYear
                .MaxMonth = .MinMonth
                .MaxDay = .MinDay
                .MaxDayOfWeek = .MinDayOfWeek
                .MaxHour = 0
                .MaxMinute = 0
                .MaxSecond = 0
            End With
        End If
        lngSMResult = SendMessage(lnghwndDTP(Index), _
                                  DTM_SETRANGE, GDTR_MIN Or GDTR_MAX, st)
    End If
End Sub

'-------------------------------------------------------------------------------
Public Property Get MaxDate(Optional ByVal Index As Integer = 0) As Date
Dim st As SYSTEMTIMERANGE
Dim lngSMResult As LongPtr

    If (blnCreate = True) Then
        Select Case Index
          Case 0
            lngSMResult = SendMessage(lnghwndDTP(1), _
                                      DTM_GETRANGE, GDT_VALID, st)
            MaxDate = DateSerial(st.MaxYear, st.MaxMonth, st.MaxDay)
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      DTM_GETRANGE, GDT_VALID, st)
            MaxDate = DateSerial(st.MaxYear, st.MaxMonth, st.MaxDay)
          Case Else
            MaxDate = CDate(0)
        End Select
    Else
      MaxDate = CDate(0)
    End If
End Property

Public Property Let MaxDate(Optional ByVal Index As Integer = 0, _
                            ByVal dtmNewValue As Date)
Dim i As Integer
    
    If (blnCreate = True) Then
        Select Case Index
          Case 0
            For i = 1 To colBaseCtrl.Count
                Call MaxDate_Sub(i, dtmNewValue)
            Next i
          Case 1 To colBaseCtrl.Count
            Call MaxDate_Sub(Index, dtmNewValue)
          Case Else
        End Select
    Else
    End If
End Property

Private Sub MaxDate_Sub(ByVal Index As Integer, _
                        ByVal dtmNewValue As Date)
Dim dtmMin As Date
Dim st As SYSTEMTIMERANGE
Dim lngSMResult As LongPtr

    lngSMResult = SendMessage(lnghwndDTP(Index), _
                              DTM_GETRANGE, GDT_VALID, st)
    
    With st
        .MaxYear = Year(dtmNewValue)
        .MaxMonth = Month(dtmNewValue)
        .MaxDay = Day(dtmNewValue)
        .MaxDayOfWeek = Weekday(dtmNewValue) - 1    ' APIでは日曜日が0
        .MaxHour = 0
        .MaxMinute = 0
        .MaxSecond = 0
    End With
    
    If (st.MinYear = 0) Then
        lngSMResult = SendMessage(lnghwndDTP(Index), _
                                  DTM_SETRANGE, GDTR_MAX, st)
    Else
        dtmMin = DateSerial(st.MinYear, st.MinMonth, st.MinDay)
        If (dtmMin > dtmNewValue) Then
            With st
                .MinYear = .MaxYear
                .MinMonth = .MaxMonth
                .MinDay = .MaxDay
                .MinDayOfWeek = .MaxDayOfWeek
                .MinHour = 0
                .MinMinute = 0
                .MinSecond = 0
            End With
        End If
        lngSMResult = SendMessage(lnghwndDTP(Index), _
                                  DTM_SETRANGE, GDTR_MAX Or GDTR_MIN, st)
    End If
End Sub

'--------------------------------------------------------------
Public Property Get CalendarBackColor(Optional ByVal Index As Integer = 0) As Long
    Dim lngSMResult As LongPtr
    
    If (blnCreate = True) Then
        Select Case Index
          Case 0
            lngSMResult = SendMessage(lnghwndDTP(1), _
                                      DTM_GETMCCOLOR, MCSC_MONTHBK, ByVal GDT_VALID)
            CalendarBackColor = CLng(lngSMResult)
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      DTM_GETMCCOLOR, MCSC_MONTHBK, ByVal GDT_VALID)
            CalendarBackColor = CLng(lngSMResult)
          Case Else
            CalendarBackColor = -1
        End Select
    Else
        CalendarBackColor = -1
    End If
End Property

Public Property Let CalendarBackColor(Optional ByVal Index As Integer = 0, _
                                      ByVal NewColor As Long)
Dim lngRGB As Long
Dim i As Integer
Dim lngSMResult As LongPtr

    If (blnCreate = True) Then
        Select Case NewColor
          'vbScrollBars(&H80000000)～vbInfoBackground(&H80000018)
          Case vbScrollBars To vbInfoBackground
            lngRGB = GetSysColor(NewColor And cstMask)
          Case &H0& To &HFFFFFF
            lngRGB = NewColor
          Case Else
            Exit Property
        End Select

        Select Case Index
          Case 0
            For i = 1 To colBaseCtrl.Count
                lngSMResult = SendMessage(lnghwndDTP(i), DTM_SETMCCOLOR, _
                                          MCSC_MONTHBK, ByVal lngRGB)
            Next i
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), DTM_SETMCCOLOR, _
                                      MCSC_MONTHBK, ByVal lngRGB)
          Case Else
        End Select
    Else
    End If
End Property

'-------------------------------------------------------------
Public Property Get CalendarForeColor(Optional ByVal Index As Integer = 0) As Long
    Dim lngSMResult As LongPtr
    
    If (blnCreate = True) Then
        Select Case Index
          Case 0
            lngSMResult = SendMessage(lnghwndDTP(1), _
                                      DTM_GETMCCOLOR, MCSC_TEXT, ByVal GDT_VALID)
            CalendarForeColor = CLng(lngSMResult)
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      DTM_GETMCCOLOR, MCSC_TEXT, ByVal GDT_VALID)
            CalendarForeColor = CLng(lngSMResult)
          Case Else
            CalendarForeColor = -1
        End Select
    Else
        CalendarForeColor = -1
    End If
End Property

Public Property Let CalendarForeColor(Optional ByVal Index As Integer = 0, _
                                      ByVal NewColor As Long)
Dim lngRGB As Long
Dim i As Integer
Dim lngSMResult As LongPtr
    
    If (blnCreate = True) Then
        Select Case NewColor
          'vbScrollBars(&H80000000)～vbInfoBackground(&H80000018)
          Case vbScrollBars To vbInfoBackground
            lngRGB = GetSysColor(NewColor And cstMask)
          Case &H0& To &HFFFFFF
            lngRGB = NewColor
          Case Else
            Exit Property
        End Select

        Select Case Index
          Case 0
            For i = 1 To colBaseCtrl.Count
                lngSMResult = SendMessage(lnghwndDTP(i), DTM_SETMCCOLOR, _
                                          MCSC_TEXT, ByVal lngRGB)
            Next i
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), DTM_SETMCCOLOR, _
                                      MCSC_TEXT, ByVal lngRGB)
          Case Else
        End Select
    Else
    End If
End Property

'-------------------------------------------------------------
Public Property Get CalendarTrailingForeColor(Optional ByVal Index As Integer = 0) As Long
    Dim lngSMResult As LongPtr
    
    If (blnCreate = True) Then
        Select Case Index
          Case 0
            lngSMResult = SendMessage(lnghwndDTP(1), _
                                      DTM_GETMCCOLOR, MCSC_TRAILINGTEXT, ByVal GDT_VALID)
            CalendarTrailingForeColor = CLng(lngSMResult)
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      DTM_GETMCCOLOR, MCSC_TRAILINGTEXT, ByVal GDT_VALID)
            CalendarTrailingForeColor = CLng(lngSMResult)
          Case Else
            CalendarTrailingForeColor = -1
        End Select
    Else
        CalendarTrailingForeColor = -1
    End If
End Property

Public Property Let CalendarTrailingForeColor(Optional ByVal Index As Integer = 0, _
                                              ByVal NewColor As Long)
Dim lngRGB As Long
Dim i As Integer
Dim lngSMResult As LongPtr
    
    If (blnCreate = True) Then
        Select Case NewColor
          'vbScrollBars(&H80000000)～vbInfoBackground(&H80000018)
          Case vbScrollBars To vbInfoBackground
            lngRGB = GetSysColor(NewColor And cstMask)
          Case &H0& To &HFFFFFF
            lngRGB = NewColor
          Case Else
            Exit Property
        End Select

        Select Case Index
          Case 0
            For i = 1 To colBaseCtrl.Count
                lngSMResult = SendMessage(lnghwndDTP(i), DTM_SETMCCOLOR, _
                                          MCSC_TRAILINGTEXT, ByVal lngRGB)
            Next i
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), DTM_SETMCCOLOR, _
                                      MCSC_TRAILINGTEXT, ByVal lngRGB)
          Case Else
        End Select
    Else
    End If
End Property

'------------------------------------------------------------
Public Property Get CalendarTitleBackColor(Optional ByVal Index As Integer = 0) As Long
    Dim lngSMResult As LongPtr

    If (blnCreate = True) Then
        Select Case Index
          Case 0
            lngSMResult = SendMessage(lnghwndDTP(1), _
                                      DTM_GETMCCOLOR, MCSC_TITLEBK, ByVal GDT_VALID)
            CalendarTitleBackColor = CLng(lngSMResult)
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      DTM_GETMCCOLOR, MCSC_TITLEBK, ByVal GDT_VALID)
            CalendarTitleBackColor = CLng(lngSMResult)
          Case Else
            CalendarTitleBackColor = -1
        End Select
    Else
        CalendarTitleBackColor = -1
    End If
End Property

Public Property Let CalendarTitleBackColor(Optional ByVal Index As Integer = 0, _
                                           ByVal NewColor As Long)
Dim lngRGB As Long
Dim i As Integer
Dim lngSMResult As LongPtr
    
    If (blnCreate = True) Then
        Select Case NewColor
          'vbScrollBars(&H80000000)～vbInfoBackground(&H80000018)
          Case vbScrollBars To vbInfoBackground
            lngRGB = GetSysColor(NewColor And cstMask)
          Case &H0& To &HFFFFFF
            lngRGB = NewColor
          Case Else
            Exit Property
        End Select

        Select Case Index
          Case 0
            For i = 1 To colBaseCtrl.Count
                lngSMResult = SendMessage(lnghwndDTP(i), DTM_SETMCCOLOR, _
                                          MCSC_TITLEBK, ByVal lngRGB)
            Next i
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), DTM_SETMCCOLOR, _
                                      MCSC_TITLEBK, ByVal lngRGB)
          Case Else
        End Select
    Else
    End If
End Property

'-------------------------------------------------------------
Public Property Get CalendarTitleForeColor(Optional ByVal Index As Integer = 0) As Long
    Dim lngSMResult As LongPtr
    
    If (blnCreate = True) Then
        Select Case Index
          Case 0
            lngSMResult = SendMessage(lnghwndDTP(1), _
                                      DTM_GETMCCOLOR, MCSC_TITLETEXT, ByVal GDT_VALID)
            CalendarTitleForeColor = CLng(lngSMResult)
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), _
                                      DTM_GETMCCOLOR, MCSC_TITLETEXT, ByVal GDT_VALID)
            CalendarTitleForeColor = CLng(lngSMResult)
          Case Else
            CalendarTitleForeColor = -1
        End Select
    Else
        CalendarTitleForeColor = -1
    End If
End Property

Public Property Let CalendarTitleForeColor(Optional ByVal Index As Integer = 0, _
                                           ByVal NewColor As Long)
Dim lngRGB As Long
Dim i As Integer
Dim lngSMResult As LongPtr
    
    If (blnCreate = True) Then
        Select Case NewColor
          'vbScrollBars(&H80000000)～vbInfoBackground(&H80000018)
          Case vbScrollBars To vbInfoBackground
            lngRGB = GetSysColor(NewColor And cstMask)
          Case &H0& To &HFFFFFF
            lngRGB = NewColor
          Case Else
            Exit Property
        End Select

        Select Case Index
          Case 0
            For i = 1 To colBaseCtrl.Count
                lngSMResult = SendMessage(lnghwndDTP(i), DTM_SETMCCOLOR, _
                                          MCSC_TITLETEXT, ByVal lngRGB)
            Next i
          Case 1 To colBaseCtrl.Count
            lngSMResult = SendMessage(lnghwndDTP(Index), DTM_SETMCCOLOR, _
                                      MCSC_TITLETEXT, ByVal lngRGB)
          Case Else
        End Select
    Else
    End If
End Property

'-----------------------------------
Private DTPCBox As clsDTPickerOnCombo3
Private DTP4 As clsDTPickerOnCombo3

Private Sub UserForm_Initialize()
Dim j As Integer

    Set DTPCBox = New clsDTPickerOnCombo3
    With DTPCBox
        .Add ComboBox1
        .Add ComboBox2
        .Add ComboBox3

        .Create Me, "yyyy/MM/dd"
    End With

    DTPCBox.DateFormat(2) = "yyyy年M月/d日"
    DTPCBox.MinDate(2) = DateValue("2009/3/10")
    DTPCBox.MaxDate(2) = DateValue("2013/7/20")

    Set DTP4 = New clsDTPickerOnCombo3
    With DTP4
        .Add ComboBox4
        .Create Me, "yy年MM月dd日(dddd)", _
                BackColor:=&H99FFFF, _
                TitleBack:=&H808000, _
                Trailing:=&H99FFFF
    End With

    With DTPCBox
        lbl_txt4.BackColor = .CalendarForeColor
        lbl_txt5.BackColor = .CalendarBackColor
        lbl_txt6.BackColor = .CalendarTitleForeColor
        lbl_txt7.BackColor = .CalendarTitleBackColor
        lbl_txt8.BackColor = .CalendarTrailingForeColor
    End With
    For j = 4 To 8
        Me.Controls("TextBox" & j).Value = _
            Right("000000" & Hex(Me.Controls("lbl_txt" & j).BackColor), 6)
    Next j
End Sub

Private Sub UserForm_Terminate()
    DTPCBox.Destroy         'DTPickerの破棄【必須】
    DTP4.Destroy
    Set DTPCBox = Nothing
    Set DTP4 = Nothing
End Sub
